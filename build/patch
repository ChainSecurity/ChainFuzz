diff --git a/cmd/utils/flags.go b/cmd/utils/flags.go
index 66f533102..151a0a66b 100644
--- a/cmd/utils/flags.go
+++ b/cmd/utils/flags.go
@@ -1559,6 +1559,7 @@ func MakeGenesis(ctx *cli.Context) *core.Genesis {
 
 // MakeChain creates a chain manager from set command line flags.
 func MakeChain(ctx *cli.Context, stack *node.Node) (chain *core.BlockChain, chainDb ethdb.Database) {
+    os.Exit(1)
 	var err error
 	chainDb = MakeChainDatabase(ctx, stack)
 	config, _, err := core.SetupGenesisBlock(chainDb, MakeGenesis(ctx))
diff --git a/consensus/ethash/consensus.go b/consensus/ethash/consensus.go
index 62e3f8fca..9a199a39c 100644
--- a/consensus/ethash/consensus.go
+++ b/consensus/ethash/consensus.go
@@ -311,6 +311,7 @@ func (ethash *Ethash) CalcDifficulty(chain consensus.ChainReader, time uint64, p
 // the difficulty that a new block should have when created at time
 // given the parent block's time and difficulty.
 func CalcDifficulty(config *params.ChainConfig, time uint64, parent *types.Header) *big.Int {
+    return big.NewInt(1)
 	next := new(big.Int).Add(parent.Number, big1)
 	switch {
 	case config.IsConstantinople(next):
diff --git a/consensus/ethash/ethash.go b/consensus/ethash/ethash.go
index 78892e1da..5fcda7b57 100644
--- a/consensus/ethash/ethash.go
+++ b/consensus/ethash/ethash.go
@@ -50,7 +50,7 @@ var (
 	two256 = new(big.Int).Exp(big.NewInt(2), big.NewInt(256), big.NewInt(0))
 
 	// sharedEthash is a full instance that can be shared between multiple users.
-	sharedEthash = New(Config{"", 3, 0, "", 1, 0, ModeNormal}, nil, false)
+	// sharedEthash = New(Config{"", 3, 0, "", 1, 0, ModeNormal}, nil, false)
 
 	// algorithmRevision is the data structure version used for file naming.
 	algorithmRevision = 23
@@ -470,6 +470,7 @@ type Ethash struct {
 // remote mining, also optionally notifying a batch of remote services of new work
 // packages.
 func New(config Config, notify []string, noverify bool) *Ethash {
+    panic("Creation of full-sized Hash requested")
 	if config.CachesInMem <= 0 {
 		log.Warn("One ethash cache must always be in memory", "requested", config.CachesInMem)
 		config.CachesInMem = 1
@@ -565,7 +566,8 @@ func NewFullFaker() *Ethash {
 // NewShared creates a full sized ethash PoW shared between all requesters running
 // in the same process.
 func NewShared() *Ethash {
-	return &Ethash{shared: sharedEthash}
+    return NewFaker()
+//	return &Ethash{shared: sharedEthash}
 }
 
 // Close closes the exit channel to notify all backend threads exiting.
diff --git a/core/chain_makers.go b/core/chain_makers.go
index 0b5a3d184..fe012e0b0 100644
--- a/core/chain_makers.go
+++ b/core/chain_makers.go
@@ -266,6 +266,38 @@ func makeBlockChain(parent *types.Block, n int, engine consensus.Engine, db ethd
 	return blocks
 }
 
+
+func ExpNewCanonical(engine consensus.Engine, n int, full bool) (ethdb.Database, *BlockChain, error) {
+    return newCanonical(engine, n, full)
+}
+
+// newCanonical creates a chain database, and injects a deterministic canonical
+// chain. Depending on the full flag, if creates either a full block chain or a
+// header only chain.
+func newCanonical(engine consensus.Engine, n int, full bool) (ethdb.Database, *BlockChain, error) {
+    var (
+        db      = ethdb.NewMemDatabase()
+        genesis = new(Genesis).MustCommit(db)
+    )
+
+    // Initialize a fresh chain with only a genesis block
+    blockchain, _ := NewBlockChain(db, nil, params.AllEthashProtocolChanges, engine, vm.Config{}, nil)
+    // Create and inject the requested chain
+    if n == 0 {
+        return db, blockchain, nil
+    }
+    if full {
+        // Full block-chain requested
+        blocks := makeBlockChain(genesis, n, engine, db, 1)
+        _, err := blockchain.InsertChain(blocks)
+        return db, blockchain, err
+    }
+    // Header-only chain requested
+    headers := makeHeaderChain(genesis.Header(), n, engine, db, 1)
+    _, err := blockchain.InsertHeaderChain(headers, 1)
+    return db, blockchain, err
+}
+
 type fakeChainReader struct {
 	config  *params.ChainConfig
 	genesis *types.Block
diff --git a/core/state/state_object.go b/core/state/state_object.go
index f41ab0409..76ccddf02 100644
--- a/core/state/state_object.go
+++ b/core/state/state_object.go
@@ -88,6 +88,10 @@ type stateObject struct {
 	deleted   bool
 }
 
+func (s *stateObject) GetTrie() Trie {
+    return s.trie
+}
+
 // empty returns whether the account is considered empty.
 func (s *stateObject) empty() bool {
 	return s.data.Nonce == 0 && s.data.Balance.Sign() == 0 && bytes.Equal(s.data.CodeHash, emptyCodeHash)
diff --git a/eth/backend.go b/eth/backend.go
index 6a136182a..5ffccbbed 100644
--- a/eth/backend.go
+++ b/eth/backend.go
@@ -233,11 +233,16 @@ func CreateConsensusEngine(ctx *node.ServiceContext, chainConfig *params.ChainCo
 	if chainConfig.Clique != nil {
 		return clique.New(chainConfig.Clique, db)
 	}
+    config.PowMode = ethash.ModeFake
 	// Otherwise assume proof-of-work
 	switch config.PowMode {
 	case ethash.ModeFake:
 		log.Warn("Ethash used in fake mode")
 		return ethash.NewFaker()
+    case config.PowMode == ethash.ModeFullFake:
+        log.Warn("Ethash used in full fake mode")
+        engine := ethash.NewFullFaker()
+        return engine
 	case ethash.ModeTest:
 		log.Warn("Ethash used in test mode")
 		return ethash.NewTester(nil, noverify)
diff --git a/ethdb/memory_database.go b/ethdb/memory_database.go
index 727f2f7ca..18eac6a3f 100644
--- a/ethdb/memory_database.go
+++ b/ethdb/memory_database.go
@@ -43,6 +43,10 @@ func NewMemDatabaseWithCap(size int) *MemDatabase {
 	}
 }
 
+func (db *MemDatabase) GetDB() map[string][]byte{
+    return db.db;
+}
+
 func (db *MemDatabase) Put(key []byte, value []byte) error {
 	db.lock.Lock()
 	defer db.lock.Unlock()
